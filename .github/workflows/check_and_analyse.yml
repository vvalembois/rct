name: Swift Linter & SonarCloud

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  lint:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install SwiftLint
        run: |
          brew install swiftlint

      - name: Run SwiftLint
        run: |
          swiftlint

  test:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '6.1.0'

      - name: Run Unit Tests
        run: |
          FIRST_IPHONE_UDID=$(xcrun simctl list devices available | grep "iPhone" | head -n 1 | awk -F '[()]' '{print $2}')
          xcodebuild test -scheme RCT -destination "id=$FIRST_IPHONE_UDID" -enableCodeCoverage YES
          
      - name: Export Coverage to JSON
        run: |
          mkdir -p .build/coverage
          XCRESULT=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" | sort | tail -n 1)
          xcrun xccov view --report --json "$XCRESULT" > .build/coverage/coverage.json

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .build/coverage/coverage.json

  sonarcloud:
    runs-on: macos-latest
    needs: [test, lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Coverage Report
        uses: actions/download-artifact@v5
        with:
          name: coverage-report
          path: .build/coverage/coverage.json

      - name: SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v6
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=vilteros-help-review
            -Dsonar.organization=vvalembois
            -Dsonar.language=swift
            -Dsonar.sources=Sources
            -Dsonar.swift.coverage.reportPaths=.build/coverage/coverage.json
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          waitForQualityGate: true